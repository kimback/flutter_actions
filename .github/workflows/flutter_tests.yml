name: Flutter CI # 워크플로우 이름 (Actions 탭에 표시됨)

on:
  push: # 푸시 이벤트 발생 시 실행
    branches:
      - main # main 브랜치로 푸시될 때만 워크플로우 실행

#======일종의 트리거 스크립트 작성========  
jobs:
  test: # 테스트 작업 정의
    runs-on: ubuntu-latest # Ubuntu 최신 버전에서 실행

    strategy:
      matrix: # 매트릭스를 사용하여 여러 환경에서 테스트 실행
        flutter-version: ['3.0.0'] # 두 가지 Flutter 버전에서 테스트 실행

    steps:
    - name: Checkout repository # 현재 리포지토리 코드 체크아웃
      uses: actions/checkout@v3 # GitHub Actions 기본 제공 체크아웃 액션 사용

    - name: Set up Flutter # Flutter 환경 설정
      uses: subosito/flutter-action@v2 # Flutter 설치 액션
      with:
        flutter-version: ${{ matrix.flutter-version }} # 매트릭스에서 지정한 Flutter 버전을 설정

    - name: Cache dependencies # 종속성 캐싱
      uses: actions/cache@v3 # GitHub Actions 기본 제공 캐싱 액션 사용
      with:
        path: ~/.pub-cache # 캐싱할 디렉터리 경로 (Flutter 패키지 캐시)
        key: ${{ runner.os }}-pub-cache # 캐시 키 (운영체제별로 구분)
        restore-keys: |
          ${{ runner.os }}-pub-cache # 캐시 복원 키

    - name: Install dependencies # Flutter 프로젝트의 종속성 설치
      run: 
        cd my_appppp
        flutter pub get # pubspec.yaml에 정의된 패키지 설치

    - name: Run unit tests # 단위 테스트 실행
      run:
        cd my_appppp 
        flutter test # test 디렉터리에 있는 모든 단위 테스트 실행

    - name: Run integration tests # 통합 테스트 실행
      run: 
        cd my_appppp
        flutter test integration_test # integration_test 디렉터리에 있는 통합 테스트 실행
